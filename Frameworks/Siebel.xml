<?xml version="1.1" encoding="UTF-8" ?>
<!DOCTYPE framework [
	<!ELEMENT framework ((dynamic-parameters?), (request-definition*),(simplified-VU-class?))>
	<!ELEMENT dynamic-parameters (dynamic-parameter+)>
	<!ELEMENT dynamic-parameter (dp-request-injector*)>
	<!ELEMENT dp-request-injector (#PCDATA)>
	<!ELEMENT request-definition (detection-rules, merge-request-rules?, message-definition*, result-handler?)>
	<!ELEMENT detection-rules (rule)>
	<!ELEMENT merge-request-rules (rule)>
	<!ELEMENT result-handler (timestamp-extractor?)>
	<!ELEMENT timestamp-extractor (#PCDATA)>
	<!ELEMENT message-definition ((conditions?), (name-extractor?))>
	<!ELEMENT conditions (condition*)>
	<!ELEMENT condition (#PCDATA)>
	<!ELEMENT name-extractor (#PCDATA)>
	<!ELEMENT simplified-VU-class (#PCDATA)>
	<!ELEMENT rule (rule*)>
	
	<!ATTLIST framework
		name CDATA #REQUIRED
		type CDATA #IMPLIED
		isReadOnly CDATA #IMPLIED
		version CDATA #REQUIRED
		licenseID CDATA #IMPLIED
		state CDATA #REQUIRED 
		group-consecutive-push-requests CDATA #IMPLIED>

	<!ATTLIST dynamic-parameter
		name CDATA #REQUIRED
		enabled CDATA #IMPLIED 
		extractionSource CDATA #REQUIRED
		extractionMethod CDATA #REQUIRED
		xpath CDATA #IMPLIED
		regexp CDATA #REQUIRED
		template CDATA #REQUIRED>
	
	<!ATTLIST dp-request-injector
		type CDATA #REQUIRED
		injectionMethod CDATA #IMPLIED
		parameterName CDATA #IMPLIED
		xpath CDATA #IMPLIED
		regexp CDATA #IMPLIED
		groups CDATA #IMPLIED>
	
	<!ATTLIST request-definition
		pushType CDATA #REQUIRED
		network CDATA #IMPLIED 
		plugin CDATA #IMPLIED 
		streamingType CDATA #IMPLIED 
		classname CDATA #IMPLIED
		pollingMaxDeltaT CDATA #IMPLIED
		pollingDefaultDelay CDATA #IMPLIED>
		
	<!ATTLIST result-handler 
		type CDATA #IMPLIED 
		messageSplitterRegexp CDATA #IMPLIED
		messageSplitterRegexpGroup CDATA #IMPLIED
		responseSource CDATA #IMPLIED
		endOfPacket CDATA #IMPLIED>
	
	<!ATTLIST timestamp-extractor 
		regExp CDATA #REQUIRED
		template CDATA #REQUIRED 
		setDefaultValue CDATA #REQUIRED 
		defaultValue CDATA #REQUIRED
		assertionOnNoMatch CDATA #IMPLIED
		extractType CDATA #IMPLIED
		matchNumber CDATA #IMPLIED
		name CDATA #IMPLIED
		uid CDATA #IMPLIED
		valueHtmlEncoded CDATA #IMPLIED>
	
	<!ATTLIST message-definition
		messageType CDATA #REQUIRED>
	
	<!ATTLIST name-extractor
		regExp CDATA #REQUIRED
		template CDATA #REQUIRED
		setDefaultValue CDATA #REQUIRED 
		defaultValue CDATA #IMPLIED
		assertionOnNoMatch CDATA #IMPLIED
		extractType CDATA #IMPLIED
		matchNumber CDATA #IMPLIED
		name CDATA #IMPLIED
		uid CDATA #IMPLIED
		valueEncoded CDATA #IMPLIED
		valueHtmlEncoded CDATA #IMPLIED
		valueUrlEncoded CDATA #IMPLIED>
	
	<!ATTLIST rule
		type CDATA #REQUIRED
		operator CDATA #REQUIRED
		value CDATA #IMPLIED
		from CDATA #IMPLIED 
		header CDATA #IMPLIED
		parametername CDATA #IMPLIED>
	
	<!ATTLIST conditions
		match-type CDATA #IMPLIED>
	
	<!ATTLIST condition
		operand1 CDATA #REQUIRED
		operator CDATA #REQUIRED
		operand2 CDATA #REQUIRED>
		 
	<!ATTLIST name
		template CDATA #REQUIRED>
		 		
	<!ATTLIST simplified-VU-class
		classname CDATA #REQUIRED>
]>
<framework isReadOnly="true" name="Siebel" signature="" state="SELECTED" type="PUSH" uniqueID="0" version="3.2.0">
<dynamic-parameters>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="BODY" name="SWEC_url" regexp="(\?|&amp;)SWEC=(\d*?)(&amp;|&quot;)" setDefaultValue="true" template="$2$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;SWEC&quot;&gt;(\d*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="BODY" name="SWEC_xml" regexp="&lt;property name=&quot;SWEC&quot;&gt;(\d*?)&lt;/property&gt;" setDefaultValue="true" template="$1$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;SWEC&quot;&gt;(\d*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="BODY" name="SWEACn_url" regexp="(\?|&amp;)SWEACn=(\d*?)(&amp;|&quot;)" setDefaultValue="true" template="$2$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;SWEACn&quot;&gt;(\d*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="BODY" name="SWEACn_xml" regexp="&lt;property name=&quot;SWEACn&quot;&gt;(\d*?)&lt;/property&gt;" setDefaultValue="true" template="$1$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;SWEACn&quot;&gt;(\d*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="BODY" name="SWEBMC_url" regexp="(\?|&amp;)SWEBMC=(\d*?)(&amp;|&quot;)" setDefaultValue="true" template="$2$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;SWEBMC&quot;&gt;(\d*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="BODY" name="SWEBMC_xml" regexp="&lt;property name=&quot;SWEBMC&quot;&gt;(\d*?)&lt;/property&gt;" setDefaultValue="true" template="$1$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;SWEBMC&quot;&gt;(\d*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="BODY" name="SWEVLC_url" regexp="ShowViewLayout\((.*?)\);" setDefaultValue="true" template="$1$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;SWEVLC&quot;&gt;(.*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="BODY" name="SWEVLC_xml" regexp="&lt;property name=&quot;cks&quot;&gt;(.*?)&lt;/property&gt;" setDefaultValue="true" template="$1$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;SWEVLC&quot;&gt;(.*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="BODY" name="SWEFI_xml" regexp="&lt;property name=&quot;SWEFI&quot;&gt;(.*?)&lt;/property&gt;" setDefaultValue="true" template="$1$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;SWEFI&quot;&gt;(.*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="BODY" name="SWEP_xml" regexp="&lt;property name=&quot;pbk&quot;&gt;(.*?)&lt;/property&gt;" setDefaultValue="true" template="$1$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;SWEP&quot;&gt;(.*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="BODY" name="SWEBRS_url" regexp="name=&quot;SWEBRS&quot; value=&quot;(.*?)&quot;" setDefaultValue="true" template="$1$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;SWEBRS&quot;&gt;(.*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="BODY" name="SWEBRS_xml" regexp="&lt;property name=&quot;SWEBRS&quot;&gt;(.*?)&lt;/property&gt;" setDefaultValue="true" template="$1$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;SWEBRS&quot;&gt;(.*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="BODY" name="SWEBID_url" regexp="navigator.id =( | &quot;)(.*?)(;|&quot;;)" setDefaultValue="true" template="$2$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;SWEBID&quot;&gt;(.*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="BODY" name="SWETS_xml" regexp="name=&quot;SWETS&quot; value=&quot;(\d*?)&quot;" setDefaultValue="true" template="$1$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;SWETS&quot;&gt;(\d*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="BODY" name="SWETS_url" regexp="(\?|&amp;)SWETS=(\d*?)(&amp;|&quot;)" setDefaultValue="true" template="$2$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;SWETS&quot;&gt;(\d*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="BODY" name="SWERowId_xml" regexp="&lt;value&gt;1-(.*?)&lt;/value&gt;" setDefaultValue="true" template="$1$">
<dp-request-injector groups="3" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;SWE(RowId|RowIds)&quot;&gt;(.*?)1-(.*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="HEADERS" name="_sn_headers" regexp="set-cookie: _sn=(.*?);" setDefaultValue="true" template="$1$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;_sn&quot;&gt;(.*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="HEADERS" name="_sn_headers_2" regexp="set-cookie: _sn=(.*?);" setDefaultValue="true" template="$1$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;_sn&quot;&gt;(.*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
<dynamic-parameter assertionOnNoMatch="true" defaultValue="&lt;NOT FOUND&gt;" extractionMethod="REGEXP_ONLY" extractionSource="BODY" name="_sn_xml" regexp="&lt;property name=&quot;_sn&quot;&gt;(.*?)&lt;/property&gt;" setDefaultValue="true" template="$1$">
<dp-request-injector groups="1" injectionMethod="REGEXP" regexp="&lt;parameter name=&quot;_sn&quot;&gt;(.*?)&lt;/parameter&gt;" type="TEXT_CONTENT"/>
</dynamic-parameter>
</dynamic-parameters>
<websocket enabled="false">
<request extractionMethod="REGEXP_ONLY" regexp="" template="$1$"/>
<response extractionMethod="REGEXP_ONLY" regexp="" template="$1$"/>
</websocket>
<request-definition classname="Siebel" network="HTTP" pollingDefaultDelay="120000" pushType="POLLING">
<detection-rules>
<rule operator="AND" type="COMPOSITE">
<rule operator="STARTS_WITH" type="PLUGIN_LABEL" value="Message Bar:UpdatePrefMsg"/>
<rule operator="EQUALS" type="PLUGIN" value="SIEBEL"/>
</rule>
</detection-rules>
<message-definition messageType="CLASSNAME"/>
<result-handler responseSource="MESSAGE" type="SIEBEL"/>
</request-definition>
<simplified-VU-class classname="com.neotys.nl.controller.data.push.SiebelSimplifiedVUCreator"/>
</framework>
